#include <dirent.h>
#include <stdlib.h> 
#include <stdio.h>
#include <gtk/gtk.h>
#include <string.h>

///////////////////////////C.I.////////////////////////////////////

int RW = 0;
int mp = 0;
int mv = 0;
int SW = 0;

/////////////////////////MainWindow/////////////////////////////////

GtkBuilder *builder;
GtkWidget  *main_window;
GError     *error = NULL;

////////////////////////////Radio///////////////////////////////////

GtkWidget       *radio_window;

////////////////////////////Mp3///////////////////////////////////

GtkWidget *mp3_list_window;
GtkWidget *mp3_window;

char* songs[100];

char* mp3_dir = "/home/nano/Desktop/test_music/";
struct dirent *mp3_ent;

////////////////////////////Mp4///////////////////////////////////

GtkWidget *mp4_list_window;
GtkWidget *mp4_window;

char *mp4_dir= "/home/nano/Desktop/test_mp4/";
struct dirent *mp4_ent;

////////////////////////////Settings///////////////////////////////////

GtkWidget *settings_window;

////////////////////////////HEADER///////////////////////////////////

void mp3_list_init();
void list_init(GtkWidget *,char*,struct dirent *);
void radio_init();
void mp3_init();
void mp4_init();
void mp4_list_init();
void settings_init();


///////////////////////////////////////////////////////////////////


void on_window_destroy(GtkObject *object, gpointer user_data)
{
   // gtk_main_quit ();
}

void on_radio_button_window_clicked(GtkButton *radio_button_window)
{// HIDE main_window and show radio_window widget
			
			if(RW==0){
			
				radio_init();
				RW=1;

			}

			gtk_widget_hide (main_window);
			gtk_widget_show(radio_window);

			
		}

void on_mp3_button_window_clicked(GtkButton *mp3_button_window)
{ // HIDE main_window and show mp3_window widget
			
			if(mp == 0){
				
				mp3_list_init();
				mp = 1;
			}

			
				gtk_widget_hide (main_window);
				gtk_widget_show_all(mp3_list_window);
			
			

		}

void on_mp4_button_window_clicked(GtkButton *mp4_button_window)
{ // HIDE main_window and show mp4_window widget

		
			if(mv==0){

				mp4_list_init();
				mv=1;

			}


			gtk_widget_hide (main_window);
			gtk_widget_show (mp4_list_window);

		}

void on_settings_button_window_clicked (GtkButton *settings_button_window)
{ // HIDE main_window and show settings_window widget

			 
			//if(SW==0){


				//settings_init();
				//Sw=1;

			//}


			//gtk_widget_hide (main_window);
			//gtk_widget_show (settings_window);

		}

///////////////////////////////////////////////////main///////////////////////////////////////////////////

int main (int argc, char *argv[])
{

	
    /* Init GTK+ */
    gtk_init( &argc, &argv );

    /* Create new GtkBuilder object */
    builder = gtk_builder_new();

    /* Load UI from file.*/
    gtk_builder_add_from_file( builder, "main_window.glade", &error );

    /* Get main window pointer from UI */
    main_window = GTK_WIDGET( gtk_builder_get_object( builder, "main_window" ) );

    /* Connect signals */
    gtk_builder_connect_signals( builder, NULL );

    /* Destroy builder, since we don't need it anymore */
    g_object_unref( G_OBJECT( builder ) );


    /* Show window. All other widgets are automatically shown by GtkBuilder */
    gtk_widget_show( main_window );

    /* Start main loop */
    gtk_main();

    return( 0 );
}

/////////////////////////   LISTA   /////////////////////////////////////////

enum
{
  LIST_ITEM = 0,
  N_COLUMNS
};

static void
init_list(GtkWidget *list)
{

  GtkCellRenderer *renderer;
  GtkTreeViewColumn *column;
  GtkListStore *store;

  renderer = gtk_cell_renderer_text_new();
  column = gtk_tree_view_column_new_with_attributes("List Items",
          renderer, "text", LIST_ITEM, NULL);
  gtk_tree_view_append_column(GTK_TREE_VIEW(list), column);

  store = gtk_list_store_new(N_COLUMNS, G_TYPE_STRING);

  gtk_tree_view_set_model(GTK_TREE_VIEW(list), 
      GTK_TREE_MODEL(store));

  g_object_unref(store);
}

static void
add_to_list(GtkWidget *list, const gchar *str)
{
  GtkListStore *store;
  GtkTreeIter iter;

  store = GTK_LIST_STORE(gtk_tree_view_get_model
      (GTK_TREE_VIEW(list)));

  gtk_list_store_append(store, &iter);
  gtk_list_store_set(store, &iter, LIST_ITEM, str, -1);
}


void  on_changed(GtkWidget *widget, gpointer label) 
{
  GtkTreeIter iter;
  GtkTreeModel *model;
  char *value;


  if (gtk_tree_selection_get_selected(
      GTK_TREE_SELECTION(widget), &model, &iter)) {

    gtk_tree_model_get(model, &iter, LIST_ITEM, &value,  -1);
    gtk_label_set_text(GTK_LABEL(label), value);
    g_free(value);
  }}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// MUSICA!!!!! ////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void mp3_list_init(){list_init(mp3_list_window, mp3_dir, mp3_ent);}
void mp4_list_init(){list_init(mp4_list_window, mp4_dir, mp4_ent);}

void list_init(GtkWidget* list_window, char* dir, struct dirent *ent){
	
  DIR* dir_actual= opendir(dir);
  GtkWidget *list;
  GtkWidget *vbox;
  GtkWidget *label;
  GtkWidget *button;
  GtkTreeSelection *selection; 

  list_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_position(GTK_WINDOW(list_window), GTK_WIN_POS_CENTER);
  gtk_container_set_border_width(GTK_CONTAINER(list_window), 10);
  gtk_widget_set_size_request(list_window, 640, 480);
  gtk_window_set_title(GTK_WINDOW(list_window), "List View");

  list = gtk_tree_view_new();
  gtk_tree_view_set_headers_visible(GTK_TREE_VIEW(list), FALSE);

  vbox = gtk_vbox_new(FALSE, 0);
  gtk_box_pack_start(GTK_BOX(vbox), list, TRUE, TRUE, 5);

  button = gtk_button_new_with_label("Play:");
  gtk_box_pack_start(GTK_BOX(vbox), button, FALSE, FALSE, 5);

	  g_signal_connect(button, "clicked", 
      		G_CALLBACK(mp3_init), NULL);

  label = gtk_label_new("");
  gtk_label_set_justify(GTK_LABEL(label), GTK_JUSTIFY_CENTER);
  gtk_box_pack_end(GTK_BOX(vbox), label, FALSE, FALSE, 5);

  gtk_container_add(GTK_CONTAINER(list_window), vbox);

  init_list(list);

	int i =0;


   while ((ent = readdir ( dir_actual)) != NULL) {

 	if(ent->d_name != "." && ent->d_name != ".."  ){
	
   	add_to_list(list, ent->d_name); //cambiar ent->d_name por n para sacar info por id3

		songs[i]=ent->d_name;
		i=i+1;

		if(i>99){i=99;}

	}

       }

  closedir ( dir_actual);

  selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(list));

  g_signal_connect(selection, "changed", 
      G_CALLBACK(on_changed), label);

 
}



/////////////////////////////////////Musica_second_window/////////////////////////////////////////////////////////////

	

	void mp3_init(){

		GtkBuilder* mp3_builder;

   	    mp3_builder = gtk_builder_new();
	    gtk_builder_add_from_file( mp3_builder, "mp3_solo.glade", &error );
	    mp3_window = GTK_WIDGET( gtk_builder_get_object( mp3_builder, "mp3_solo" ) );
	    gtk_builder_connect_signals(mp3_builder, NULL );
	    g_object_unref( G_OBJECT( mp3_builder ) );

	   	gtk_widget_show_all(mp3_window);
		gtk_widget_hide (mp3_list_window);


	}


	void mp3_return(GtkButton* exit_button){gtk_widget_show_all(main_window); gtk_widget_hide (mp3_window);} ///return de mp3

	void mp3_back_song(GtkButton* back_button){}
	void mp3_next_song(GtkButton* next_button){}

	void mp3_play_button(GtkButton* play_song){}
	void mp3_pause_button(GtkButton* pause_song){}
	void mp3_stop_button(GtkButton* stop_song){}
	void mp3_low_volume_button(GtkButton* low_volume){}
	void mp3_high_volume_button(GtkButton* high_volume){}




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////RADIO//////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void radio_init(){

	 GtkBuilder      *builder_radio;

    builder_radio = gtk_builder_new ();
    gtk_builder_add_from_file (builder_radio, "radio_window.glade", NULL);
    radio_window = GTK_WIDGET (gtk_builder_get_object (builder_radio, "radio_window"));
    gtk_builder_connect_signals (builder_radio, NULL);
    g_object_unref (G_OBJECT (builder_radio));

}


	void high_volume_button(GtkButton* volume_high){}
	void low_volume_button(GtkButton* volume_low){}
	void fav_button(GtkButton* save_station){}
	void next_button(GtkButton* forward_station){}
	void back_button(GtkButton* back_station){}
	void move_slider(){}
	void change_mode(GtkButton* mode){}
	void return_button(GtkButton* back){gtk_widget_show_all(main_window); gtk_widget_hide (radio_window);}
		

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////MP4//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////Second_ Mp4///////////////////////////////////////////



void mp4_init(){

	GtkBuilder      *builder_mp4;

    builder_mp4 = gtk_builder_new ();
    gtk_builder_add_from_file (builder_mp4, "mp4_window.glade", NULL);
    radio_window = GTK_WIDGET (gtk_builder_get_object (builder_mp4, "mp4_window"));
    gtk_builder_connect_signals (builder_mp4, NULL);
    g_object_unref (G_OBJECT (builder_mp4));

		gtk_widget_show_all(mp4_window); 
		gtk_widget_hide (mp4_list_window);


}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
////////////////////////////////////////////////////Settings////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*

void settings_init(){

    GtkBuilder      *builder_settings;

    builder_settings = gtk_builder_new ();
    gtk_builder_add_from_file (builder_settings, "settings_window.glade", NULL);
    radio_window = GTK_WIDGET (gtk_builder_get_object (builder_settings, "settings_window"));
    gtk_builder_connect_signals (builder_settings, NULL);
    g_object_unref (G_OBJECT (builder_settings));

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
